datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  relationMode         = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String @id @default(uuid())
  email     String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password  Password?

  shows     ShowOnUser[]
  episodes  EpisodeOnUser[]
}

model Password {
  hash   String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model PasswordReset {
  id String @id @default(uuid())

  createdAt DateTime @default(now())

  token String @unique
  email String
}

model Show {
  id         String @id @default(uuid())
  name       String
  mazeId     String @unique
  premiered  DateTime
  ended      DateTime?
  rating     Float?
  imageUrl   String?
  summary    String @db.Text

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  episodes  Episode[]

  users        ShowOnUser[]
  userEpisode  EpisodeOnUser[]

  @@index([mazeId])
}

model ShowOnUser {
  id         String @id @default(uuid())
  archived   Boolean @default(false)

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  show       Show   @relation(fields: [showId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  showId     String

  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     String

  @@index([userId])
  @@index([showId])
  @@unique([showId, userId])
}

model Episode {
  id        String @id @default(uuid())
  mazeId    String @unique
  name      String
  season    Int
  number    Int
  airDate   DateTime
  runtime   Int
  imageUrl  String?
  summary   String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  show      Show   @relation(fields: [showId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  showId    String

  users     EpisodeOnUser[]

  @@index([showId])
  @@index([imageUrl])
}

model EpisodeOnUser {
  id         String @id @default(uuid())

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  episode    Episode   @relation(fields: [episodeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  episodeId  String

  show       Show   @relation(fields: [showId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  showId     String

  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     String

  @@index([userId])
  @@index([episodeId, showId])
  @@index([episodeId])
  @@index([showId])
  @@unique([episodeId, showId, userId])
}

model Invite {
  id         String @id @default(uuid())
}
